Astra Linux
 /etc/apt/sources.list

deb http://download.astralinux.ru/astra/frozen/1.7_x86-64/1.7.3/uu/2/repository-base 1.7_x86-64 main non-free contrib
deb http://download.astralinux.ru/astra/frozen/1.7_x86-64/1.7.3/uu/2/repository-extended 1.7_x86-64 main contrib non-free


[WARNING]: Platform linux on host 10.22.2.202 is using the discovered Python interpreter at /usr/bin/python, but future installation of another Python interpreter could change this. See
https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html for more information.

Это предупреждение связано с механизмом обнаружения Python-интерпретатора (Python interpreter discovery) в Ansible. Вот что оно означает:

Причина предупреждения
Ansible автоматически ищет интерпретатор Python на управляемом узле (хосте) для выполнения своих модулей. В данном случае Ansible обнаружил, что используется интерпретатор Python, расположенный по пути /usr/bin/python.

Но:

Если на вашем узле будет установлен другой интерпретатор (например, /usr/bin/python3), то это может изменить поведение playbook.
Ansible сообщает, что для большей стабильности вы можете явно указать путь к нужному интерпретатору Python.
Решение
Чтобы устранить предупреждение и быть уверенным, что Ansible использует нужный интерпретатор, добавьте параметр ansible_python_interpreter в ваш инвентарь.

hosts.ini
[all]
10.22.2.202 ansible_user=myuser ansible_become=true ansible_python_interpreter=/usr/bin/python3

В Playbook:
Вы можете указать интерпретатор в блоке vars:

---
- hosts: all
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Проверить Python интерпретатор
      command: python3 --version


В глобальном конфигурационном файле ansible.cfg:
Если все ваши узлы используют один и тот же интерпретатор, настройте его глобально:
[defaults]
interpreter_python = /usr/bin/python3
Почему это важно?
Узлы могут иметь разные версии Python (python2, python3) или разные пути к ним.
Некоторые модули Ansible требуют Python 3, а не Python 2.
После внесения изменений предупреждение исчезнет, и playbook станет стабильнее при выполнении на разных узлах.

Установка нескольких пакетов

      - name: Install multiple Python packages
        ansible.builtin.pip:
          name:
            - psycopg
            - python-etcd
            - etcd3


Как сохранить результат команды в переменную?

С помощью модуля register

- name: Run some command and register output as variable
  shell: command
  register: command_result	


Как запустить и поставить службу на автозагрузку?

- name: Start and Enable httpd
  systemd:
    name: httpd.service
    state: started
    enabled: yes

Список переменных в ansible: (найди определение каждому и где в каких случаях он используется)

role defaults

inventory vars

inventory group_vars

inventory host_vars

playbook group_vars

playbook host_vars

host facts

play vars

play vars_prompt

play vars_files

registered vars

set_facts

role and include vars

block vars (only for tasks in block)

task vars (only for the task)

extra vars (always win precedence)




7. Используйте одну роль для нескольких задач
Технически роль представляет собой единственную точку входа tasks/main.yml, которую без присвоения тегов сложно применять для разных задач.
Но на практике это возможно, если добавить разные переменные. Их использование позволит получить небольшой операционный маршрутизатор внутри своей роли:

---
# roles/service/vars/main.yml
# by default, we ensure that service is present, configured and running.
# allowed values: present, absent, install, configure, start, stop
state: present

---
# roles/service/tasks/main.yml
- include: "{{ state }}.yml"

---
# roles/service/tasks/present.yml
- include: "install.yml"
- include: "configure.yml"
- include: "start.yml"

---
# roles/service/tasks/install.yml
- name: add user testuser1
  user:
	name: testuser1
	state: present
	groups: wheel


В ansible.cfg можно легко изменить конфигурацию Ansible под свои запросы и задачи. 
Для этого достаточно создать ansible.cfg файл, в котором запускаются сценарии, чтобы Ansible мог автоматически извлекать и объединять его содержимое с глобальной конфигурацией. 
Приоритет следующий:

ANSIBLE_CONFIG (переменная окружения)

ansible.cfg (в текущем каталоге)

.ansible.cfg (в домашнем каталоге пользователя)

/etc/ansible/ansible.cfg

Благодаря этому Ansible можно легко настроить под себя.


###############################################################################################################################################################################


Посмотрите, как выглядит хорошо организованная структура каталогов Ansible:
inventory/
    production                # inventory file for production servers
    staging                   # inventory file for staging environment
    testing                   # inventory file for testing environment
 
group_vars/
   group1.yml             # variables for particular groups
   group2.yml
host_vars/
  host1.yml               # variables for particular systems
  host2.yml
 
library/                  # Store here any custom modules (optional)
module_utils/             # Store here any custom module_utils to support modules (optional)
filter_plugins/           # Store here any filter plugins (optional)
 
master.yml                # master playbook
webservers.yml            # playbook for webserver tier
dbservers.yml             # playbook for dbserver tier
 
roles/
   example_role/               # this hierarchy represents a "role"
       tasks/            #
           main.yml      #  <-- tasks file can include smaller files if warranted
       handlers/         #
           main.yml      #  <-- handlers file
       templates/        #  <-- files for use with the template resource
           ntp.conf.j2   #  <------- templates end in jinja2
       files/            #
           bar.txt       #  <-- files for use with the copy resource
           foo.sh        #  <-- script files for use with the script resource
       vars/             #
           main.yml      #  <-- variables associated with this role
       defaults/         #
           main.yml      #  <-- default lower priority variables for this role
       meta/             #
           main.yml      #  <-- role dependencies
       library/          # roles can also include custom modules
       module_utils/     # roles can also include custom module_utils
       lookup_plugins/   # or other types of plugins, like lookup in this case
 
   monitoring/              # same kind of structure as "common" was above, done for the monitoring role



###############################################################################################################################################################################

States: 

Модуль file
present: Убедиться, что файл или директория существует. Если файл или директория не существует, он будет создан.
absent: Убедиться, что файл или директория отсутствует. Если файл или директория существует, он будет удален.
directory: Убедиться, что директория существует. Если директория не существует, она будет создана.
touch: Создать пустой файл или обновить время последнего изменения существующего файла.
link: Создать символическую ссылку.
hard: Создать жесткую ссылку

Модуль copy
present: Убедиться, что файл существует на удаленной системе. Если файл не существует, он будет скопирован с локальной системы на удаленную

Модуль package
present: Убедиться, что пакет установлен. Если пакет не установлен, он будет установлен.
absent: Убедиться, что пакет отсутствует. Если пакет установлен, он будет удален.
latest: Убедиться, что установлена последняя версия пакета

Модуль service
started: Убедиться, что сервис запущен. Если сервис не запущен, он будет запущен.
stopped: Убедиться, что сервис остановлен. Если сервис запущен, он будет остановлен.
restarted: Перезапустить сервис.
reloaded: Перезагрузить конфигурацию сервиса.
enabled: Убедиться, что сервис включен для автозапуска при старте системы.
disabled: Убедиться, что сервис отключен для автозапуска при старте системы.
